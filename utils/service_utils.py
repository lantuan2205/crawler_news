from fastapi import FastAPI, File, UploadFile, Form, HTTPException
import re
import os
import requests
import json
from datetime import datetime
import time
from pathlib import Path
from utils.mongodb_utils import save_article, save_image_metadata, save_category

OUTPUT_FILE = "crawl_result.json"
UPLOAD_API_HOST = "192.168.132.250"
UPLOAD_API_PORT = "8080"
UPLOAD_API_ENDPOINT = "/api/upload"
UPLOAD_API_URL = f"http://{UPLOAD_API_HOST}:{UPLOAD_API_PORT}{UPLOAD_API_ENDPOINT}"

def save_to_db(data, output_file=None):
    """
    L∆∞u d·ªØ li·ªáu v√†o MongoDB
    
    Args:
        data (dict/list): D·ªØ li·ªáu c·∫ßn l∆∞u
        output_file (str, optional): Kh√¥ng s·ª≠ d·ª•ng trong MongoDB, gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
    
    Returns:
        str: ID c·ªßa b·∫£n ghi ƒë√£ l∆∞u ho·∫∑c None n·∫øu c√≥ l·ªói
    """
    try:
        if isinstance(data, list):
            # N·∫øu l√† danh s√°ch b√†i vi·∫øt
            saved_ids = []
            for article in data:
                # L∆∞u metadata ·∫£nh n·∫øu c√≥
                if 'imageUrl' in article and article['imageUrl']:
                    image_data = {
                        'image_url': article['imageUrl'],
                        'local_path': article.get('localImagePath', ''),
                        'file_size': article.get('imageSize', 0)
                    }
                    save_image_metadata(image_data)
                
                # L∆∞u b√†i vi·∫øt
                result = save_article(article)
                if result:
                    saved_ids.append(str(result.inserted_id))
            
            print(f"‚úÖ ƒê√£ l∆∞u {len(saved_ids)} b√†i vi·∫øt v√†o MongoDB")
            return saved_ids
            
        elif isinstance(data, dict):
            # N·∫øu l√† m·ªôt b√†i vi·∫øt ƒë∆°n l·∫ª
            # L∆∞u metadata ·∫£nh n·∫øu c√≥
            if 'imageUrl' in data and data['imageUrl']:
                image_data = {
                    'image_url': data['imageUrl'],
                    'local_path': data.get('localImagePath', ''),
                    'file_size': data.get('imageSize', 0)
                }
                save_image_metadata(image_data)
            
            # L∆∞u b√†i vi·∫øt
            result = save_article(data)
            if result:
                print(f"‚úÖ ƒê√£ l∆∞u b√†i vi·∫øt v√†o MongoDB v·ªõi ID: {result.inserted_id}")
                return str(result.inserted_id)
        
        return None
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu v√†o MongoDB: {e}")
        return None


# H√†m l∆∞u d·ªØ li·ªáu v√†o file JSON
def save_to_json(data):
    """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print(f" D·ªØ li·ªáu ƒë√£ l∆∞u v√†o {OUTPUT_FILE}")
    except IOError as e:
        print(f" L·ªói khi ghi file {OUTPUT_FILE}: {e}")

def send_json_to_api():
    """G·ª≠i file JSON ƒë·∫øn API ƒë·ªÉ l∆∞u tr·ªØ"""
    if not os.path.exists(OUTPUT_FILE):
        print(" [] Kh√¥ng t√¨m th·∫•y file JSON ƒë·ªÉ upload")
        return
    with open(OUTPUT_FILE, "rb") as f:
        files = {"file": f}
        data = {"data": "NEWS_INFO"}  # Th√™m metadata

        try:
            response = requests.post(UPLOAD_API_URL, files=files, data=data)
            print(f" [] Upload API Response: {response}")

        except requests.RequestException as e:
            print(f" [] L·ªói khi g·ª≠i file: {e}")
    # N·∫øu g·ª≠i th√†nh c√¥ng, xo√° file JSON
    if response.status_code == 200:
        os.remove(OUTPUT_FILE)
        print(f"üóë File {OUTPUT_FILE} ƒë√£ b·ªã x√≥a sau khi g·ª≠i!")

def clean_date(text_date):
    """Chu·∫©n h√≥a ƒë·ªãnh d·∫°ng ng√†y gi·ªù: gi·ªØ s·ªë 0, chuy·ªÉn AM/PM sang 24h, th√™m (GMT+7) n·∫øu thi·∫øu."""
    # Lo·∫°i b·ªè ph·∫ßn "Th·ª© ..., ng√†y", "Ch·ªß Nh·∫≠t, ng√†y", ho·∫∑c "Th·ª© ... -" / "Ch·ªß Nh·∫≠t -"
    text_date = re.sub(r"(Th·ª©\s\w+|Ch·ªß\sNh·∫≠t)[,\s-]*(ng√†y\s*)?", "", text_date, flags=re.IGNORECASE).strip()

    # Thay d·∫•u "-" b·∫±ng d·∫•u ","
    text_date = text_date.replace(" - ", ", ").replace(" -", ",").replace("- ", ",")

    # N·∫øu text c√≥ d·∫°ng [gi·ªù ph√∫t][kho·∫£ng tr·∫Øng][ng√†y/th√°ng/nƒÉm]
    match = re.search(r"(\d{1,2}):(\d{2})\s*(\d{1,2})/(\d{1,2})/(\d{4})", text_date)
    if match:
        hour, minute, day, month, year = match.groups()
        text_date = f"{int(day):02}/{int(month):02}/{year}, {int(hour):02}:{minute}"
    else:
        # N·∫øu l√† d·∫°ng ng√†y tr∆∞·ªõc gi·ªù sau
        # Chu·∫©n h√≥a ng√†y/th√°ng/nƒÉm th√†nh d·∫°ng 2 ch·ªØ s·ªë (n·∫øu thi·∫øu)
        match_date = re.search(r"(\d{1,2})/(\d{1,2})/(\d{4})", text_date)
        if match_date:
            day, month, year = match_date.groups()
            text_date = text_date.replace(match_date.group(), f"{int(day):02}/{int(month):02}/{year}")

        # Chu·∫©n h√≥a gi·ªù ph√∫t AM/PM (n·∫øu c√≥)
        match_time = re.search(r"(\d{1,2}):(\d{2})\s?(AM|PM)?", text_date, re.IGNORECASE)
        if match_time:
            hour, minute, period = match_time.groups()
            hour = int(hour)
            if period:
                if period.upper() == "PM" and hour != 12:
                    hour += 12
                elif period.upper() == "AM" and hour == 12:
                    hour = 0
            text_date = re.sub(r"(\d{1,2}):(\d{2})\s?(AM|PM)?", f"{hour:02}:{minute}", text_date)

        # ƒê·∫£m b·∫£o c√≥ d·∫•u "," gi·ªØa ng√†y v√† gi·ªù n·∫øu thi·∫øu
        text_date = re.sub(r"(\d{2}/\d{2}/\d{4})\s+(\d{2}:\d{2})", r"\1, \2", text_date)

    # ƒê·∫£m b·∫£o c√≥ (GMT+7) n·∫øu ch∆∞a c√≥
    if "(GMT+7)" not in text_date:
        text_date += " (GMT+7)"

    return text_date

